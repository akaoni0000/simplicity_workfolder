C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Yoshida
                    -_Lab\SimplicityStudio\v5_workspace\EFM8SB1_Watchdog\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEV
                    -EL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Yoshida_Lab\Simplicit
                    -yStudio\v5_workspace\EFM8SB1_Watchdog\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.3.1//Device/shared/s
                    -i8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.3.1//Device/EFM8SB1/inc) PRINT(.\src\InitDevice.lst)
                    - COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          
  17          // $[Library Includes]
  18          // [Library Includes]$
  19          
  20          //==============================================================================
  21          // enter_SlowBlink_from_RESET
  22          //==============================================================================
  23          extern void enter_SlowBlink_from_RESET(void) {
  24   1              // $[Config Calls]
  25   1              // Save the SFRPAGE
  26   1              uint8_t SFRPAGE_save = SFRPAGE;
  27   1              PCA_0_enter_SlowBlink_from_RESET();
  28   1              VREG_0_enter_SlowBlink_from_RESET();
  29   1              PORTS_1_enter_SlowBlink_from_RESET();
  30   1              PBCFG_0_enter_SlowBlink_from_RESET();
  31   1              RSTSRC_0_enter_SlowBlink_from_RESET();
  32   1              HFOSC_0_enter_SlowBlink_from_RESET();
  33   1              CLOCK_0_enter_SlowBlink_from_RESET();
  34   1              TIMER16_2_enter_SlowBlink_from_RESET();
  35   1              INTERRUPT_0_enter_SlowBlink_from_RESET();
  36   1              // Restore the SFRPAGE
  37   1              SFRPAGE = SFRPAGE_save;
  38   1              // [Config Calls]$
  39   1      
  40   1      
  41   1      }
  42          
  43          
  44          //================================================================================
  45          // PCA_0_enter_SlowBlink_from_RESET
  46          //================================================================================
  47          extern void PCA_0_enter_SlowBlink_from_RESET(void) {
  48   1              // $[PCA0MD - PCA Mode]
  49   1              /*
  50   1              // WDTE (Watchdog Timer Enable) = DISABLED (Disable Watchdog Timer.)
  51   1              // CPS (PCA Counter/Timer Pulse Select) = SYSCLK_DIV_12 (System clock
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 2   

  52   1              //     divided by 12.)
  53   1              // CIDL (PCA Counter/Timer Idle Control) = NORMAL (PCA continues to
  54   1              //     function normally while the system controller is in Idle Mode.)
  55   1              // ECF (PCA Counter/Timer Overflow Interrupt Enable) = OVF_INT_DISABLED
  56   1              //     (Disable the CF interrupt.)
  57   1              // WDTE (Watchdog Timer Enable) = DISABLED (Disable Watchdog Timer.)
  58   1              // WDLCK (Watchdog Timer Lock) = UNLOCKED (Watchdog Timer Enable
  59   1              //     unlocked.)
  60   1              */
  61   1              SFRPAGE = 0x00;
  62   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  63   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
  64   1                       | PCA0MD_WDTE__DISABLED | PCA0MD_WDLCK__UNLOCKED;
  65   1              // [PCA0MD - PCA Mode]$
  66   1      
  67   1              // $[PCA0H - PCA Counter/Timer High Byte]
  68   1              // [PCA0H - PCA Counter/Timer High Byte]$
  69   1      
  70   1              // $[PCA0L - PCA Counter/Timer Low Byte]
  71   1              // [PCA0L - PCA Counter/Timer Low Byte]$
  72   1      
  73   1              // $[PCA0PWM - PCA PWM Configuration]
  74   1              // [PCA0PWM - PCA PWM Configuration]$
  75   1      
  76   1              // $[PCA0CN0 - PCA Control 0]
  77   1              // [PCA0CN0 - PCA Control 0]$
  78   1      
  79   1      
  80   1      }
  81          
  82          //================================================================================
  83          // VREG_0_enter_SlowBlink_from_RESET
  84          //================================================================================
  85          extern void VREG_0_enter_SlowBlink_from_RESET(void) {
  86   1              // $[REG0CN - Voltage Regulator Control]
  87   1              /*
  88   1              // OSCBIAS (High Frequency Oscillator Bias) = ENABLED (Enable the
  89   1              //     precision High Frequency Oscillator bias.)
  90   1              */
  91   1              REG0CN = REG0CN_OSCBIAS__ENABLED;
  92   1              // [REG0CN - Voltage Regulator Control]$
  93   1      
  94   1      
  95   1      }
  96          
  97          //================================================================================
  98          // PORTS_1_enter_SlowBlink_from_RESET
  99          //================================================================================
 100          extern void PORTS_1_enter_SlowBlink_from_RESET(void) {
 101   1              // $[P1 - Port 1 Pin Latch]
 102   1              // [P1 - Port 1 Pin Latch]$
 103   1      
 104   1              // $[P1MDOUT - Port 1 Output Mode]
 105   1              /*
 106   1              // B0 (Port 1 Bit 0 Output Mode) = OPEN_DRAIN (P1.0 output is open-
 107   1              //     drain.)
 108   1              // B1 (Port 1 Bit 1 Output Mode) = PUSH_PULL (P1.1 output is push-pull.)
 109   1              // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 110   1              //     drain.)
 111   1              // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 112   1              //     drain.)
 113   1              // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 114   1              //     drain.)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 3   

 115   1              // B5 (Port 1 Bit 5 Output Mode) = OPEN_DRAIN (P1.5 output is open-
 116   1              //     drain.)
 117   1              // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 118   1              //     drain.)
 119   1              // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 120   1              //     drain.)
 121   1              */
 122   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__PUSH_PULL | P1MDOUT_B2__OPEN_DRAIN
 123   1                       | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 124   1                       | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 125   1              // [P1MDOUT - Port 1 Output Mode]$
 126   1      
 127   1              // $[P1MDIN - Port 1 Input Mode]
 128   1              // [P1MDIN - Port 1 Input Mode]$
 129   1      
 130   1              // $[P1SKIP - Port 1 Skip]
 131   1              // [P1SKIP - Port 1 Skip]$
 132   1      
 133   1              // $[P1MASK - Port 1 Mask]
 134   1              // [P1MASK - Port 1 Mask]$
 135   1      
 136   1              // $[P1MAT - Port 1 Match]
 137   1              // [P1MAT - Port 1 Match]$
 138   1      
 139   1              // $[P1DRV - Port 1 Drive Strength]
 140   1              // [P1DRV - Port 1 Drive Strength]$
 141   1      
 142   1      
 143   1      }
 144          
 145          //================================================================================
 146          // PBCFG_0_enter_SlowBlink_from_RESET
 147          //================================================================================
 148          extern void PBCFG_0_enter_SlowBlink_from_RESET(void) {
 149   1              // $[XBR2 - Port I/O Crossbar 2]
 150   1              /*
 151   1              // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 152   1              //     Pullups enabled (except for Ports whose I/O are configured for analog
 153   1              //     mode).)
 154   1              // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 155   1              */
 156   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 157   1              // [XBR2 - Port I/O Crossbar 2]$
 158   1      
 159   1              // $[XBR0 - Port I/O Crossbar 0]
 160   1              // [XBR0 - Port I/O Crossbar 0]$
 161   1      
 162   1              // $[XBR1 - Port I/O Crossbar 1]
 163   1              // [XBR1 - Port I/O Crossbar 1]$
 164   1      
 165   1      
 166   1      }
 167          
 168          //================================================================================
 169          // RSTSRC_0_enter_SlowBlink_from_RESET
 170          //================================================================================
 171          extern void RSTSRC_0_enter_SlowBlink_from_RESET(void) {
 172   1              // $[RSTSRC - Reset Source]
 173   1              /*
 174   1              // PORSF (Power-On / Supply Monitor Reset Flag, and Supply Monitor Reset
 175   1              //     Enable) = SET (A power-on or supply monitor reset occurred.)
 176   1              // MCDRSF (Missing Clock Detector Enable and Flag) = SET (A missing clock
 177   1              //     detector reset occurred.)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 4   

 178   1              // C0RSEF (Comparator0 Reset Enable and Flag) = NOT_SET (A Comparator 0
 179   1              //     reset did not occur.)
 180   1              // RTC0RE (RTC Reset Enable and Flag) = NOT_SET (A RTC alarm or
 181   1              //     oscillator fail reset did not occur.)
 182   1              */
 183   1              RSTSRC = RSTSRC_PORSF__SET | RSTSRC_MCDRSF__SET | RSTSRC_C0RSEF__NOT_SET
 184   1                       | RSTSRC_RTC0RE__NOT_SET;
 185   1              // [RSTSRC - Reset Source]$
 186   1      
 187   1      
 188   1      }
 189          
 190          //================================================================================
 191          // HFOSC_0_enter_SlowBlink_from_RESET
 192          //================================================================================
 193          extern void HFOSC_0_enter_SlowBlink_from_RESET(void) {
 194   1              // $[HFO#CAL - High Frequency Oscillator Calibration]
 195   1              // [HFO#CAL - High Frequency Oscillator Calibration]$
 196   1      
 197   1              // $[HFO#CN - High Frequency Oscillator Control]
 198   1              /*
 199   1              // IOSCEN (High Frequency Oscillator Enable) = ENABLED (High Frequency
 200   1              //     Oscillator enabled.)
 201   1              */
 202   1              HFO0CN |= HFO0CN_IOSCEN__ENABLED;
 203   1              // [HFO#CN - High Frequency Oscillator Control]$
 204   1      
 205   1              // $[Oscillator Ready]
 206   1              while((HFO0CN & HFO0CN_IFRDY__BMASK) == HFO0CN_IFRDY__NOT_SET);
 207   1              // [Oscillator Ready]$
 208   1      
 209   1      
 210   1      }
 211          
 212          //================================================================================
 213          // CLOCK_0_enter_SlowBlink_from_RESET
 214          //================================================================================
 215          extern void CLOCK_0_enter_SlowBlink_from_RESET(void) {
 216   1              // $[CLKSEL - Clock Select]
 217   1              /*
 218   1              // CLKDIV (Clock Source Divider) = SYSCLK_DIV_8 (SYSCLK is equal to
 219   1              //     selected clock source divided by 8.)
 220   1              // CLKSL (Clock Source Select) = HFOSC (Clock derived from the internal
 221   1              //     precision High-Frequency Oscillator.)
 222   1              */
 223   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_8 | CLKSEL_CLKSL__HFOSC;
 224   1              // Wait for the clock to be ready
 225   1              while((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET);
 226   1              // [CLKSEL - Clock Select]$
 227   1      
 228   1      
 229   1      }
 230          
 231          //================================================================================
 232          // TIMER16_2_enter_SlowBlink_from_RESET
 233          //================================================================================
 234          extern void TIMER16_2_enter_SlowBlink_from_RESET(void) {
 235   1              // $[Timer Initialization]
 236   1              // Save Timer Configuration
 237   1              uint8_t TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 238   1              // Stop Timer
 239   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 240   1              // [Timer Initialization]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 5   

 241   1      
 242   1              // $[TMR2CN0 - Timer 2 Control]
 243   1              // [TMR2CN0 - Timer 2 Control]$
 244   1      
 245   1              // $[TMR2H - Timer 2 High Byte]
 246   1              /*
 247   1              // TMR2H (Timer 2 High Byte) = 0xFF
 248   1              */
 249   1              TMR2H = (0xFF << TMR2H_TMR2H__SHIFT);
 250   1              // [TMR2H - Timer 2 High Byte]$
 251   1      
 252   1              // $[TMR2L - Timer 2 Low Byte]
 253   1              /*
 254   1              // TMR2L (Timer 2 Low Byte) = 0xFF
 255   1              */
 256   1              TMR2L = (0xFF << TMR2L_TMR2L__SHIFT);
 257   1              // [TMR2L - Timer 2 Low Byte]$
 258   1      
 259   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 260   1              /*
 261   1              // TMR2RLH (Timer 2 Reload High Byte) = 0x38
 262   1              */
 263   1              TMR2RLH = (0x38 << TMR2RLH_TMR2RLH__SHIFT);
 264   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 265   1      
 266   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 267   1              /*
 268   1              // TMR2RLL (Timer 2 Reload Low Byte) = 0x9E
 269   1              */
 270   1              TMR2RLL = (0x9E << TMR2RLL_TMR2RLL__SHIFT);
 271   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 272   1      
 273   1              // $[TMR2CN0]
 274   1              /*
 275   1              // TR2 (Timer 2 Run Control) = RUN (Start Timer 2 running.)
 276   1              */
 277   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 278   1              // [TMR2CN0]$
 279   1      
 280   1              // $[Timer Restoration]
 281   1              // Restore Timer Configuration
 282   1              TMR2CN0 |= TMR2CN0_TR2_save;
 283   1              // [Timer Restoration]$
 284   1      
 285   1      
 286   1      }
 287          
 288          //================================================================================
 289          // INTERRUPT_0_enter_SlowBlink_from_RESET
 290          //================================================================================
 291          extern void INTERRUPT_0_enter_SlowBlink_from_RESET(void) {
 292   1              // $[EIE1 - Extended Interrupt Enable 1]
 293   1              // [EIE1 - Extended Interrupt Enable 1]$
 294   1      
 295   1              // $[EIP1 - Extended Interrupt Priority 1]
 296   1              // [EIP1 - Extended Interrupt Priority 1]$
 297   1      
 298   1              // $[IE - Interrupt Enable]
 299   1              /*
 300   1              // EA (All Interrupts Enable) = DISABLED (Disable all interrupt sources.)
 301   1              // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 302   1              //     interrupt 0.)
 303   1              // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 6   

 304   1              //     interrupt 1.)
 305   1              // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 306   1              //     interrupts.)
 307   1              // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 308   1              //     interrupt.)
 309   1              // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 310   1              //     interrupt.)
 311   1              // ET2 (Timer 2 Interrupt Enable) = ENABLED (Enable interrupt requests
 312   1              //     generated by the TF2L or TF2H flags.)
 313   1              // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 314   1              */
 315   1              IE = IE_EA__DISABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 316   1                       | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__ENABLED | IE_ES0__DISABLED;
 317   1              // [IE - Interrupt Enable]$
 318   1      
 319   1              // $[IP - Interrupt Priority]
 320   1              // [IP - Interrupt Priority]$
 321   1      
 322   1              // $[EIE2 - Extended Interrupt Enable 2]
 323   1              // [EIE2 - Extended Interrupt Enable 2]$
 324   1      
 325   1              // $[EIP2 - Extended Interrupt Priority 2]
 326   1              // [EIP2 - Extended Interrupt Priority 2]$
 327   1      
 328   1      
 329   1      }
 330          
 331          //==============================================================================
 332          // enter_FastBlink_from_RESET
 333          //==============================================================================
 334          extern void enter_FastBlink_from_RESET(void) {
 335   1              // $[Config Calls]
 336   1              // Save the SFRPAGE
 337   1              uint8_t SFRPAGE_save = SFRPAGE;
 338   1              PCA_0_enter_FastBlink_from_RESET();
 339   1              VREG_0_enter_FastBlink_from_RESET();
 340   1              PORTS_1_enter_FastBlink_from_RESET();
 341   1              PBCFG_0_enter_FastBlink_from_RESET();
 342   1              RSTSRC_0_enter_FastBlink_from_RESET();
 343   1              HFOSC_0_enter_FastBlink_from_RESET();
 344   1              CLOCK_0_enter_FastBlink_from_RESET();
 345   1              TIMER16_2_enter_FastBlink_from_RESET();
 346   1              INTERRUPT_0_enter_FastBlink_from_RESET();
 347   1              // Restore the SFRPAGE
 348   1              SFRPAGE = SFRPAGE_save;
 349   1              // [Config Calls]$
 350   1      
 351   1      
 352   1      }
 353          
 354          
 355          //================================================================================
 356          // PCA_0_enter_FastBlink_from_RESET
 357          //================================================================================
 358          extern void PCA_0_enter_FastBlink_from_RESET(void) {
 359   1              // $[PCA0MD - PCA Mode]
 360   1              /*
 361   1              // WDTE (Watchdog Timer Enable) = DISABLED (Disable Watchdog Timer.)
 362   1              // CPS (PCA Counter/Timer Pulse Select) = SYSCLK_DIV_12 (System clock
 363   1              //     divided by 12.)
 364   1              // CIDL (PCA Counter/Timer Idle Control) = NORMAL (PCA continues to
 365   1              //     function normally while the system controller is in Idle Mode.)
 366   1              // ECF (PCA Counter/Timer Overflow Interrupt Enable) = OVF_INT_DISABLED
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 7   

 367   1              //     (Disable the CF interrupt.)
 368   1              // WDTE (Watchdog Timer Enable) = DISABLED (Disable Watchdog Timer.)
 369   1              // WDLCK (Watchdog Timer Lock) = UNLOCKED (Watchdog Timer Enable
 370   1              //     unlocked.)
 371   1              */
 372   1              SFRPAGE = 0x00;
 373   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
 374   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
 375   1                       | PCA0MD_WDTE__DISABLED | PCA0MD_WDLCK__UNLOCKED;
 376   1              // [PCA0MD - PCA Mode]$
 377   1      
 378   1              // $[PCA0H - PCA Counter/Timer High Byte]
 379   1              // [PCA0H - PCA Counter/Timer High Byte]$
 380   1      
 381   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 382   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 383   1      
 384   1              // $[PCA0PWM - PCA PWM Configuration]
 385   1              // [PCA0PWM - PCA PWM Configuration]$
 386   1      
 387   1              // $[PCA0CN0 - PCA Control 0]
 388   1              // [PCA0CN0 - PCA Control 0]$
 389   1      
 390   1      
 391   1      }
 392          
 393          //================================================================================
 394          // VREG_0_enter_FastBlink_from_RESET
 395          //================================================================================
 396          extern void VREG_0_enter_FastBlink_from_RESET(void) {
 397   1              // $[REG0CN - Voltage Regulator Control]
 398   1              /*
 399   1              // OSCBIAS (High Frequency Oscillator Bias) = ENABLED (Enable the
 400   1              //     precision High Frequency Oscillator bias.)
 401   1              */
 402   1              REG0CN = REG0CN_OSCBIAS__ENABLED;
 403   1              // [REG0CN - Voltage Regulator Control]$
 404   1      
 405   1      
 406   1      }
 407          
 408          //================================================================================
 409          // PORTS_1_enter_FastBlink_from_RESET
 410          //================================================================================
 411          extern void PORTS_1_enter_FastBlink_from_RESET(void) {
 412   1              // $[P1 - Port 1 Pin Latch]
 413   1              // [P1 - Port 1 Pin Latch]$
 414   1      
 415   1              // $[P1MDOUT - Port 1 Output Mode]
 416   1              /*
 417   1              // B0 (Port 1 Bit 0 Output Mode) = OPEN_DRAIN (P1.0 output is open-
 418   1              //     drain.)
 419   1              // B1 (Port 1 Bit 1 Output Mode) = PUSH_PULL (P1.1 output is push-pull.)
 420   1              // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 421   1              //     drain.)
 422   1              // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 423   1              //     drain.)
 424   1              // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 425   1              //     drain.)
 426   1              // B5 (Port 1 Bit 5 Output Mode) = OPEN_DRAIN (P1.5 output is open-
 427   1              //     drain.)
 428   1              // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 429   1              //     drain.)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 8   

 430   1              // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 431   1              //     drain.)
 432   1              */
 433   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__PUSH_PULL | P1MDOUT_B2__OPEN_DRAIN
 434   1                       | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 435   1                       | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 436   1              // [P1MDOUT - Port 1 Output Mode]$
 437   1      
 438   1              // $[P1MDIN - Port 1 Input Mode]
 439   1              // [P1MDIN - Port 1 Input Mode]$
 440   1      
 441   1              // $[P1SKIP - Port 1 Skip]
 442   1              // [P1SKIP - Port 1 Skip]$
 443   1      
 444   1              // $[P1MASK - Port 1 Mask]
 445   1              // [P1MASK - Port 1 Mask]$
 446   1      
 447   1              // $[P1MAT - Port 1 Match]
 448   1              // [P1MAT - Port 1 Match]$
 449   1      
 450   1              // $[P1DRV - Port 1 Drive Strength]
 451   1              // [P1DRV - Port 1 Drive Strength]$
 452   1      
 453   1      
 454   1      }
 455          
 456          //================================================================================
 457          // PBCFG_0_enter_FastBlink_from_RESET
 458          //================================================================================
 459          extern void PBCFG_0_enter_FastBlink_from_RESET(void) {
 460   1              // $[XBR2 - Port I/O Crossbar 2]
 461   1              /*
 462   1              // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 463   1              //     Pullups enabled (except for Ports whose I/O are configured for analog
 464   1              //     mode).)
 465   1              // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 466   1              */
 467   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 468   1              // [XBR2 - Port I/O Crossbar 2]$
 469   1      
 470   1              // $[XBR0 - Port I/O Crossbar 0]
 471   1              // [XBR0 - Port I/O Crossbar 0]$
 472   1      
 473   1              // $[XBR1 - Port I/O Crossbar 1]
 474   1              // [XBR1 - Port I/O Crossbar 1]$
 475   1      
 476   1      
 477   1      }
 478          
 479          //================================================================================
 480          // RSTSRC_0_enter_FastBlink_from_RESET
 481          //================================================================================
 482          extern void RSTSRC_0_enter_FastBlink_from_RESET(void) {
 483   1              // $[RSTSRC - Reset Source]
 484   1              /*
 485   1              // PORSF (Power-On / Supply Monitor Reset Flag, and Supply Monitor Reset
 486   1              //     Enable) = SET (A power-on or supply monitor reset occurred.)
 487   1              // MCDRSF (Missing Clock Detector Enable and Flag) = SET (A missing clock
 488   1              //     detector reset occurred.)
 489   1              // C0RSEF (Comparator0 Reset Enable and Flag) = NOT_SET (A Comparator 0
 490   1              //     reset did not occur.)
 491   1              // RTC0RE (RTC Reset Enable and Flag) = NOT_SET (A RTC alarm or
 492   1              //     oscillator fail reset did not occur.)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 9   

 493   1              */
 494   1              RSTSRC = RSTSRC_PORSF__SET | RSTSRC_MCDRSF__SET | RSTSRC_C0RSEF__NOT_SET
 495   1                       | RSTSRC_RTC0RE__NOT_SET;
 496   1              // [RSTSRC - Reset Source]$
 497   1      
 498   1      
 499   1      }
 500          
 501          //================================================================================
 502          // HFOSC_0_enter_FastBlink_from_RESET
 503          //================================================================================
 504          extern void HFOSC_0_enter_FastBlink_from_RESET(void) {
 505   1              // $[HFO#CAL - High Frequency Oscillator Calibration]
 506   1              // [HFO#CAL - High Frequency Oscillator Calibration]$
 507   1      
 508   1              // $[HFO#CN - High Frequency Oscillator Control]
 509   1              /*
 510   1              // IOSCEN (High Frequency Oscillator Enable) = ENABLED (High Frequency
 511   1              //     Oscillator enabled.)
 512   1              */
 513   1              HFO0CN |= HFO0CN_IOSCEN__ENABLED;
 514   1              // [HFO#CN - High Frequency Oscillator Control]$
 515   1      
 516   1              // $[Oscillator Ready]
 517   1              while((HFO0CN & HFO0CN_IFRDY__BMASK) == HFO0CN_IFRDY__NOT_SET);
 518   1              // [Oscillator Ready]$
 519   1      
 520   1      
 521   1      }
 522          
 523          //================================================================================
 524          // CLOCK_0_enter_FastBlink_from_RESET
 525          //================================================================================
 526          extern void CLOCK_0_enter_FastBlink_from_RESET(void) {
 527   1              // $[CLKSEL - Clock Select]
 528   1              /*
 529   1              // CLKDIV (Clock Source Divider) = SYSCLK_DIV_8 (SYSCLK is equal to
 530   1              //     selected clock source divided by 8.)
 531   1              // CLKSL (Clock Source Select) = HFOSC (Clock derived from the internal
 532   1              //     precision High-Frequency Oscillator.)
 533   1              */
 534   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_8 | CLKSEL_CLKSL__HFOSC;
 535   1              // Wait for the clock to be ready
 536   1              while((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET);
 537   1              // [CLKSEL - Clock Select]$
 538   1      
 539   1      
 540   1      }
 541          
 542          //================================================================================
 543          // TIMER16_2_enter_FastBlink_from_RESET
 544          //================================================================================
 545          extern void TIMER16_2_enter_FastBlink_from_RESET(void) {
 546   1              // $[Timer Initialization]
 547   1              // Save Timer Configuration
 548   1              uint8_t TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 549   1              // Stop Timer
 550   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 551   1              // [Timer Initialization]$
 552   1      
 553   1              // $[TMR2CN0 - Timer 2 Control]
 554   1              // [TMR2CN0 - Timer 2 Control]$
 555   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 10  

 556   1              // $[TMR2H - Timer 2 High Byte]
 557   1              /*
 558   1              // TMR2H (Timer 2 High Byte) = 0xFF
 559   1              */
 560   1              TMR2H = (0xFF << TMR2H_TMR2H__SHIFT);
 561   1              // [TMR2H - Timer 2 High Byte]$
 562   1      
 563   1              // $[TMR2L - Timer 2 Low Byte]
 564   1              /*
 565   1              // TMR2L (Timer 2 Low Byte) = 0xFF
 566   1              */
 567   1              TMR2L = (0xFF << TMR2L_TMR2L__SHIFT);
 568   1              // [TMR2L - Timer 2 Low Byte]$
 569   1      
 570   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 571   1              /*
 572   1              // TMR2RLH (Timer 2 Reload High Byte) = 0xCE
 573   1              */
 574   1              TMR2RLH = (0xCE << TMR2RLH_TMR2RLH__SHIFT);
 575   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 576   1      
 577   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 578   1              /*
 579   1              // TMR2RLL (Timer 2 Reload Low Byte) = 0x28
 580   1              */
 581   1              TMR2RLL = (0x28 << TMR2RLL_TMR2RLL__SHIFT);
 582   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 583   1      
 584   1              // $[TMR2CN0]
 585   1              /*
 586   1              // TR2 (Timer 2 Run Control) = RUN (Start Timer 2 running.)
 587   1              */
 588   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 589   1              // [TMR2CN0]$
 590   1      
 591   1              // $[Timer Restoration]
 592   1              // Restore Timer Configuration
 593   1              TMR2CN0 |= TMR2CN0_TR2_save;
 594   1              // [Timer Restoration]$
 595   1      
 596   1      
 597   1      }
 598          
 599          //================================================================================
 600          // INTERRUPT_0_enter_FastBlink_from_RESET
 601          //================================================================================
 602          extern void INTERRUPT_0_enter_FastBlink_from_RESET(void) {
 603   1              // $[EIE1 - Extended Interrupt Enable 1]
 604   1              // [EIE1 - Extended Interrupt Enable 1]$
 605   1      
 606   1              // $[EIP1 - Extended Interrupt Priority 1]
 607   1              // [EIP1 - Extended Interrupt Priority 1]$
 608   1      
 609   1              // $[IE - Interrupt Enable]
 610   1              /*
 611   1              // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 612   1              //     to its individual mask setting.)
 613   1              // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 614   1              //     interrupt 0.)
 615   1              // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 616   1              //     interrupt 1.)
 617   1              // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 618   1              //     interrupts.)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 11  

 619   1              // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 620   1              //     interrupt.)
 621   1              // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 622   1              //     interrupt.)
 623   1              // ET2 (Timer 2 Interrupt Enable) = ENABLED (Enable interrupt requests
 624   1              //     generated by the TF2L or TF2H flags.)
 625   1              // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 626   1              */
 627   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 628   1                       | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__ENABLED | IE_ES0__DISABLED;
 629   1              // [IE - Interrupt Enable]$
 630   1      
 631   1              // $[IP - Interrupt Priority]
 632   1              // [IP - Interrupt Priority]$
 633   1      
 634   1              // $[EIE2 - Extended Interrupt Enable 2]
 635   1              // [EIE2 - Extended Interrupt Enable 2]$
 636   1      
 637   1              // $[EIP2 - Extended Interrupt Priority 2]
 638   1              // [EIP2 - Extended Interrupt Priority 2]$
 639   1      
 640   1      
 641   1      }
 642          
 643          //==============================================================================
 644          // enter_SlowBlink_WD_from_SlowBlink
 645          //==============================================================================
 646          extern void enter_SlowBlink_WD_from_SlowBlink(void) {
 647   1              // $[Config Calls]
 648   1              // Save the SFRPAGE
 649   1              uint8_t SFRPAGE_save = SFRPAGE;
 650   1              PCA_0_enter_SlowBlink_WD_from_SlowBlink();
 651   1              PCACH_2_enter_SlowBlink_WD_from_SlowBlink();
 652   1              PORTS_1_enter_SlowBlink_WD_from_SlowBlink();
 653   1              PBCFG_0_enter_SlowBlink_WD_from_SlowBlink();
 654   1              INTERRUPT_0_enter_SlowBlink_WD_from_SlowBlink();
 655   1              // Restore the SFRPAGE
 656   1              SFRPAGE = SFRPAGE_save;
 657   1              // [Config Calls]$
 658   1      
 659   1      
 660   1      }
 661          
 662          
 663          //================================================================================
 664          // PCA_0_enter_SlowBlink_WD_from_SlowBlink
 665          //================================================================================
 666          extern void PCA_0_enter_SlowBlink_WD_from_SlowBlink(void) {
 667   1              // $[PCA0MD - PCA Mode]
 668   1              /*
 669   1              // WDTE (Watchdog Timer Enable) = ENABLED (Enable PCA Module 2 as the
 670   1              //     Watchdog Timer.)
 671   1              // CPS (PCA Counter/Timer Pulse Select) = SYSCLK_DIV_12 (System clock
 672   1              //     divided by 12.)
 673   1              // CIDL (PCA Counter/Timer Idle Control) = NORMAL (PCA continues to
 674   1              //     function normally while the system controller is in Idle Mode.)
 675   1              // ECF (PCA Counter/Timer Overflow Interrupt Enable) = OVF_INT_DISABLED
 676   1              //     (Disable the CF interrupt.)
 677   1              // WDTE (Watchdog Timer Enable) = ENABLED (Enable PCA Module 2 as the
 678   1              //     Watchdog Timer.)
 679   1              // WDLCK (Watchdog Timer Lock) = UNLOCKED (Watchdog Timer Enable
 680   1              //     unlocked.)
 681   1              */
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 12  

 682   1              SFRPAGE = 0x00;
 683   1              PCA0MD |= PCA0MD_WDTE__ENABLED;
 684   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
 685   1                       | PCA0MD_WDTE__ENABLED | PCA0MD_WDLCK__UNLOCKED;
 686   1              // [PCA0MD - PCA Mode]$
 687   1      
 688   1              // $[PCA0H - PCA Counter/Timer High Byte]
 689   1              // [PCA0H - PCA Counter/Timer High Byte]$
 690   1      
 691   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 692   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 693   1      
 694   1              // $[PCA0PWM - PCA PWM Configuration]
 695   1              // [PCA0PWM - PCA PWM Configuration]$
 696   1      
 697   1              // $[PCA0CN0 - PCA Control 0]
 698   1              // [PCA0CN0 - PCA Control 0]$
 699   1      
 700   1      
 701   1      }
 702          
 703          //================================================================================
 704          // INTERRUPT_0_enter_SlowBlink_WD_from_SlowBlink
 705          //================================================================================
 706          extern void INTERRUPT_0_enter_SlowBlink_WD_from_SlowBlink(void) {
 707   1              // $[EIE1 - Extended Interrupt Enable 1]
 708   1              // [EIE1 - Extended Interrupt Enable 1]$
 709   1      
 710   1              // $[EIP1 - Extended Interrupt Priority 1]
 711   1              // [EIP1 - Extended Interrupt Priority 1]$
 712   1      
 713   1              // $[IE - Interrupt Enable]
 714   1              /*
 715   1              // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 716   1              //     to its individual mask setting.)
 717   1              // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 718   1              //     interrupt 0.)
 719   1              // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 720   1              //     interrupt 1.)
 721   1              // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 722   1              //     interrupts.)
 723   1              // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 724   1              //     interrupt.)
 725   1              // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 726   1              //     interrupt.)
 727   1              // ET2 (Timer 2 Interrupt Enable) = ENABLED (Enable interrupt requests
 728   1              //     generated by the TF2L or TF2H flags.)
 729   1              // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 730   1              */
 731   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 732   1                       | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__ENABLED | IE_ES0__DISABLED;
 733   1              // [IE - Interrupt Enable]$
 734   1      
 735   1              // $[IP - Interrupt Priority]
 736   1              // [IP - Interrupt Priority]$
 737   1      
 738   1              // $[EIE2 - Extended Interrupt Enable 2]
 739   1              // [EIE2 - Extended Interrupt Enable 2]$
 740   1      
 741   1              // $[EIP2 - Extended Interrupt Priority 2]
 742   1              // [EIP2 - Extended Interrupt Priority 2]$
 743   1      
 744   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 13  

 745   1      }
 746          
 747          
 748          extern void PCACH_2_enter_SlowBlink_WD_from_SlowBlink(void) {
 749   1              // $[PCA0 Settings Save]
 750   1              uint8_t PCA0CN0_CR_save = PCA0CN0 & PCA0CN0_CR__BMASK;
 751   1              uint8_t PCA0PWM_ARSEL_save = PCA0PWM & PCA0PWM_ARSEL__BMASK;
 752   1      
 753   1              // Turn PCA0 off while updating PCACH2
 754   1              PCA0CN0 &= ~PCA0CN0_CR__BMASK;
 755   1              // Select Capture/Compare register)
 756   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 757   1              // [PCA0 Settings Save]$
 758   1      
 759   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
 760   1              /*
 761   1              // CAPN (Channel 2 Capture Negative Function Enable) = DISABLED (Disable
 762   1              //     negative edge capture.)
 763   1              // ECCF (Channel 2 Capture/Compare Flag Interrupt Enable) = DISABLED
 764   1              //     (Disable CCF2 interrupts.)
 765   1              // MAT (Channel 2 Match Function Enable) = ENABLED (Enable match
 766   1              //     function.)
 767   1              // PWM16 (Channel 2 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
 768   1              //     11-bit PWM selected.)
 769   1              // CAPP (Channel 2 Capture Positive Function Enable) = DISABLED (Disable
 770   1              //     positive edge capture.)
 771   1              // ECOM (Channel 2 Comparator Function Enable) = ENABLED (Enable
 772   1              //     comparator function.)
 773   1              // PWM (Channel 2 Pulse Width Modulation Mode Enable) = DISABLED (Disable
 774   1              //     PWM function.)
 775   1              // TOG (Channel 2 Toggle Function Enable) = DISABLED (Disable toggle
 776   1              //     function.)
 777   1              */
 778   1              PCA0CPM2 = PCA0CPM2_CAPN__DISABLED | PCA0CPM2_ECCF__DISABLED | PCA0CPM2_MAT__ENABLED
 779   1                       | PCA0CPM2_PWM16__8_BIT | PCA0CPM2_CAPP__DISABLED | PCA0CPM2_ECOM__ENABLED
 780   1                       | PCA0CPM2_PWM__DISABLED | PCA0CPM2_TOG__DISABLED;
 781   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
 782   1      
 783   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 784   1              /*
 785   1              // PCA0CPL2 (PCA Channel 2 Capture Module Low Byte) = 0xFF
 786   1              */
 787   1              PCA0CPL2 = (0xFF << PCA0CPL2_PCA0CPL2__SHIFT);
 788   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 789   1      
 790   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 791   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 792   1      
 793   1              // $[Auto-reload]
 794   1              // [Auto-reload]$
 795   1      
 796   1              // $[PCA0 Settings Restore]
 797   1              PCA0CN0 |= PCA0CN0_CR_save;
 798   1              PCA0PWM |= PCA0PWM_ARSEL_save;
 799   1              // [PCA0 Settings Restore]$
 800   1      
 801   1      
 802   1      }
 803          
 804          extern void PORTS_1_enter_SlowBlink_WD_from_SlowBlink(void) {
 805   1              // $[P1 - Port 1 Pin Latch]
 806   1              // [P1 - Port 1 Pin Latch]$
 807   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 14  

 808   1              // $[P1MDOUT - Port 1 Output Mode]
 809   1              /*
 810   1              // B0 (Port 1 Bit 0 Output Mode) = OPEN_DRAIN (P1.0 output is open-
 811   1              //     drain.)
 812   1              // B1 (Port 1 Bit 1 Output Mode) = PUSH_PULL (P1.1 output is push-pull.)
 813   1              // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 814   1              //     drain.)
 815   1              // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 816   1              //     drain.)
 817   1              // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 818   1              //     drain.)
 819   1              // B5 (Port 1 Bit 5 Output Mode) = PUSH_PULL (P1.5 output is push-pull.)
 820   1              // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 821   1              //     drain.)
 822   1              // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 823   1              //     drain.)
 824   1              */
 825   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__PUSH_PULL | P1MDOUT_B2__OPEN_DRAIN
 826   1                       | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__PUSH_PULL
 827   1                       | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 828   1              // [P1MDOUT - Port 1 Output Mode]$
 829   1      
 830   1              // $[P1MDIN - Port 1 Input Mode]
 831   1              // [P1MDIN - Port 1 Input Mode]$
 832   1      
 833   1              // $[P1SKIP - Port 1 Skip]
 834   1              // [P1SKIP - Port 1 Skip]$
 835   1      
 836   1              // $[P1MASK - Port 1 Mask]
 837   1              // [P1MASK - Port 1 Mask]$
 838   1      
 839   1              // $[P1MAT - Port 1 Match]
 840   1              // [P1MAT - Port 1 Match]$
 841   1      
 842   1              // $[P1DRV - Port 1 Drive Strength]
 843   1              // [P1DRV - Port 1 Drive Strength]$
 844   1      
 845   1      
 846   1      }
 847          
 848          extern void PBCFG_0_enter_SlowBlink_WD_from_SlowBlink(void) {
 849   1              // $[XBR2 - Port I/O Crossbar 2]
 850   1              // [XBR2 - Port I/O Crossbar 2]$
 851   1      
 852   1              // $[XBR0 - Port I/O Crossbar 0]
 853   1              // [XBR0 - Port I/O Crossbar 0]$
 854   1      
 855   1              // $[XBR1 - Port I/O Crossbar 1]
 856   1              // [XBR1 - Port I/O Crossbar 1]$
 857   1      
 858   1      
 859   1      }
 860          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    290    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/18/2024 18:34:54 PAGE 15  

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
