C51 COMPILER V9.60.0.0   EFM8SB1_SMBUS_MASTER_MULTIBYTE                                    08/25/2024 21:07:34 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EFM8SB1_SMBUS_MASTER_MULTIBYTE
OBJECT MODULE PLACED IN .\src\EFM8SB1_SMBus_Master_Multibyte.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Yoshida
                    -_Lab\SimplicityStudio\v5_workspace\EFM8SB1_SMBus_Master_Multibyte\src\EFM8SB1_SMBus_Master_Multibyte.c OMF2 SMALL DEBUG 
                    -OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INC
                    -DIR(C:\Users\Yoshida_Lab\SimplicityStudio\v5_workspace\EFM8SB1_SMBus_Master_Multibyte\inc;C:/SiliconLabs/SimplicityStudi
                    -o/v5/developer/sdks/8051/v4.3.1//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.3.1/
                    -/Device/EFM8SB1/inc) PRINT(.\src\EFM8SB1_SMBus_Master_Multibyte.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM
                    -8SB1_SMBus_Master_Multibyte.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // SB1_SMBus_Master_Multibyte.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // Example software to demonstrate the SMBus interface in
  10          // Master mode.
  11          // - Interrupt-driven SMBus implementation
  12          // - Only master states defined (no slave or arbitration)
  13          // - multiple-byte SMBus data holders used for each transmit and receive
  14          // - Timer1 used as SMBus clock source
  15          // - Timer3 used by SMBus for SCL low timeout detection
  16          // - SCL frequency defined by SMBUS module in Configurator
  17          // - SMB0CN0_ARBLOST support included
  18          // - supports multiple-byte writes and multiple-byte reads
  19          // - Pinout:
  20          //    P1.2 -> SDA (SMBus)
  21          //    P1.3 -> SCL (SMBus)
  22          //
  23          //    P1.1 -> LED0
  24          //
  25          //    P2.0 -> C2D (debug interface)
  26          //
  27          //    all other port pins unused
  28          //
  29          // How To Test:
  30          //
  31          // 1) Place the switch in "AEM" mode.
  32          // 2) Connect the device to another EFM8 device running SMBus - Slave Multibyte code.
  33          // 3) Connect the EFM8SB1 STK board to a PC using a mini USB cable.
  34          // 4) Compile and download code to the EFM8SB1 STK board.
  35          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  36          //    click the Debug button in the quick menu, or press F11.
  37          // 5) Run the code.
  38          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  39          //    click the Resume button in the quick menu, or press F8.
  40          //         a) The test will indicate proper communication with the Slave by
  41          //            toggling the LED on and off each time a value is sent and
  42          //            received.
  43          //         b) The best method to view the proper functionality is to run to
  44          //            the indicated line of code in the TEST CODE section of main and
  45          //            view the SMB_DATA_IN and SMB_DATA_OUT variable arrays in the
  46          //            Watch Window.
  47          //
  48          // Target:         EFM8SB1
  49          // Tool chain:     Simplicity Studio / Keil C51 9.51
  50          // Command Line:   None
C51 COMPILER V9.60.0.0   EFM8SB1_SMBUS_MASTER_MULTIBYTE                                    08/25/2024 21:07:34 PAGE 2   

  51          //
  52          // Release 1.0 (BL)
  53          //    - Initial Release
  54          //    - 9 JAN 2015
  55          //
  56          //
  57          
  58          //-----------------------------------------------------------------------------
  59          // Includes
  60          //-----------------------------------------------------------------------------
  61          #include <SI_EFM8SB1_Register_Enums.h>                  // SI_SFR declarations
  62          #include "InitDevice.h"
  63          #include "EFM8SB1_SMBus_Master_Multibyte.h"
  64          
  65          //-----------------------------------------------------------------------------
  66          // Global VARIABLES
  67          //-----------------------------------------------------------------------------
  68          
  69          // Global holder for SMBus data
  70          // All receive data is written here
  71          uint8_t SMB_DATA_IN[NUM_BYTES_RD];
  72          
  73          // Global holder for SMBus data.
  74          // All transmit data is read from here
  75          uint8_t SMB_DATA_OUT[NUM_BYTES_WR];
  76          
  77          
  78          uint8_t TARGET;                             // Target SMBus slave address
  79          
  80          volatile bool SMB_BUSY;                          // Software flag to indicate when the
  81                                                 // SMB_Read() or SMB_Write() functions
  82                                                 // have claimed the SMBus
  83          
  84          volatile bool SMB_RW;                            // Software flag to indicate the
  85                                                 // direction of the current transfer
  86          
  87          uint16_t NUM_ERRORS;                        // Counter for the number of errors.
  88          
  89          SI_LOCATED_VARIABLE_NO_INIT (reserved, uint8_t, SI_SEG_XDATA, 0x0000);
  90          
  91          //-----------------------------------------------------------------------------
  92          // Pin Definitions
  93          //-----------------------------------------------------------------------------
  94          SI_SBIT (DISP_EN, SFR_P2, 7);          // Display Enable
  95          #define DISP_BC_DRIVEN   0             // 0 = Board Controller drives display
  96          #define DISP_EFM8_DRIVEN 1             // 1 = EFM8 drives display
  97          
  98          SI_SBIT (SDA, SFR_P1, 1);                 // SMBus on P1.2
  99          SI_SBIT (SCL, SFR_P1, 3);                 // and P1.3
 100          
 101          //-----------------------------------------------------------------------------
 102          // Function PROTOTYPES
 103          //-----------------------------------------------------------------------------
 104          
 105          void SMB_Write (void);
 106          void SMB_Read (void);
 107          void T0_Waitms (uint8_t ms);
 108          
 109          //-----------------------------------------------------------------------------
 110          // SiLabs_Startup() Routine
 111          // ----------------------------------------------------------------------------
 112          // This function is called immediately after reset, before the initialization
 113          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
C51 COMPILER V9.60.0.0   EFM8SB1_SMBUS_MASTER_MULTIBYTE                                    08/25/2024 21:07:34 PAGE 3   

 114          // useful place to disable the watchdog timer, which is enable by default
 115          // and may trigger before main() in some instances.
 116          //-----------------------------------------------------------------------------
 117          void SiLabs_Startup (void)
 118          {
 119   1        // Disable the watchdog here
 120   1      }
 121          
 122          //-----------------------------------------------------------------------------
 123          // main() Routine
 124          // ----------------------------------------------------------------------------
 125          int main (void)
 126          {
 127   1              volatile uint8_t dat;         // Test counter
 128   1              volatile uint8_t data_count;  // SMB_DATA_IN and SMB_DATA_OUT counter
 129   1              uint8_t i;                    // Dummy variable counters
 130   1      
 131   1              //Enter default mode
 132   1              enter_DefaultMode_from_RESET();
 133   1      
 134   1              DISP_EN = DISP_BC_DRIVEN;
 135   1      
 136   1              // If slave is holding SDA low because of an improper SMBus reset or error
 137   1              while(!SDA)
 138   1              {
 139   2                // Provide clock pulses to allow the slave to advance out
 140   2                // of its current state. This will allow it to release SDA.
 141   2                XBR1 = 0x40;                     // Enable Crossbar
 142   2                SCL = 0;                         // Drive the clock low
 143   2                for(i = 0; i < 255; i++);        // Hold the clock low
 144   2                SCL = 1;                         // Release the clock
 145   2                while(!SCL);                     // Wait for open-drain
 146   2                                                                                 // clock output to rise
 147   2                for(i = 0; i < 10; i++);         // Hold the clock high
 148   2                XBR1 = 0x00;                     // Disable Crossbar
 149   2              }
 150   1      
 151   1              //Enter default mode
 152   1              enter_Mode2_from_DefaultMode();
 153   1      
 154   1              LED0 = LED_OFF;
 155   1      
 156   1              // TEST CODE-------------------------------------------------------------------
 157   1      
 158   1              dat = 0;                            // Output data counter
 159   1              NUM_ERRORS = 0;                     // Error counter
 160   1              while (1)
 161   1              {
 162   2                // SMBus Write Sequence
 163   2                for (data_count = 0; data_count < NUM_BYTES_WR; data_count++)
 164   2                {
 165   3                       SMB_DATA_OUT[data_count] = dat; // Define next outgoing byte
 166   3                       dat++;
 167   3                }
 168   2                TARGET = SLAVE_ADDR;             // Target the Slave for next SMBus
 169   2                                                                                 // transfer
 170   2                SMB_Write();                     // Initiate SMBus write
 171   2      
 172   2                // SMBus Read Sequence
 173   2                TARGET = SLAVE_ADDR;             // Target the Slave for next SMBus
 174   2                                                                                 // transfer
 175   2                SMB_Read();
 176   2      
C51 COMPILER V9.60.0.0   EFM8SB1_SMBUS_MASTER_MULTIBYTE                                    08/25/2024 21:07:34 PAGE 4   

 177   2                // Check transfer data
 178   2                for (data_count = 0; data_count < NUM_BYTES_RD; data_count++)
 179   2                {
 180   3                       // Received data match transmit data?
 181   3                       if(SMB_DATA_IN[data_count] != SMB_DATA_OUT[data_count])
 182   3                       {
 183   4                              NUM_ERRORS++;              // Increment error counter if no
 184   4                                                                                 // match
 185   4                       }
 186   3                }
 187   2      
 188   2                // Indicate that an error has occurred (LED no longer lit)
 189   2                if (NUM_ERRORS > 0) {
 190   3                       LED0 = LED_OFF;
 191   3                }
 192   2                else {
 193   3                       LED0 = !LED0;
 194   3                }
 195   2      
 196   2                // Run to here to view the SMB_DATA_IN and SMB_DATA_OUT variable arrays
 197   2      
 198   2                T0_Waitms (50);                  // Wait 50 ms until the next cycle
 199   2                                                                                 // so that LED blinks slow enough to see
 200   2              }
 201   1      
 202   1              // END TEST CODE---------------------------------------------------------------
 203   1      }
 204          
 205          //-----------------------------------------------------------------------------
 206          // Support Functions
 207          //-----------------------------------------------------------------------------
 208          
 209          //-----------------------------------------------------------------------------
 210          // SMB_Write
 211          //-----------------------------------------------------------------------------
 212          //
 213          // Return Value : None
 214          // Parameters   : None
 215          //
 216          // Writes a single byte to the slave with address specified by the <TARGET>
 217          // variable.
 218          // Calling sequence:
 219          // 1) Write target slave address to the <TARGET> variable
 220          // 2) Write outgoing data to the <SMB_DATA_OUT> variable array
 221          // 3) Call SMB_Write()
 222          //
 223          //-----------------------------------------------------------------------------
 224          void SMB_Write (void)
 225          {
 226   1         while (SMB_BUSY);                   // Wait for SMBus to be free.
 227   1         SMB_BUSY = 1;                       // Claim SMBus (set to busy)
 228   1         SMB_RW = 0;                         // Mark this transfer as a WRITE
 229   1         SMB0CN0_STA = 1;                            // Start transfer
 230   1      }
 231          
 232          //-----------------------------------------------------------------------------
 233          // SMB_Read
 234          //-----------------------------------------------------------------------------
 235          //
 236          // Return Value : None
 237          // Parameters   : None
 238          //
 239          // Reads a single byte from the slave with address specified by the <TARGET>
C51 COMPILER V9.60.0.0   EFM8SB1_SMBUS_MASTER_MULTIBYTE                                    08/25/2024 21:07:34 PAGE 5   

 240          // variable.
 241          // Calling sequence:
 242          // 1) Write target slave address to the <TARGET> variable
 243          // 2) Call SMB_Write()
 244          // 3) Read input data from <SMB_DATA_IN> variable array
 245          //
 246          //-----------------------------------------------------------------------------
 247          void SMB_Read (void)
 248          {
 249   1         while (SMB_BUSY);               // Wait for bus to be free.
 250   1         SMB_BUSY = 1;                       // Claim SMBus (set to busy)
 251   1         SMB_RW = 1;                         // Mark this transfer as a READ
 252   1      
 253   1         SMB0CN0_STA = 1;                            // Start transfer
 254   1      
 255   1         while (SMB_BUSY);               // Wait for transfer to complete
 256   1      }
 257          
 258          //-----------------------------------------------------------------------------
 259          // T0_Waitms
 260          //-----------------------------------------------------------------------------
 261          //
 262          // Return Value : None
 263          // Parameters   :
 264          //   1) uint8_t ms - number of milliseconds to wait
 265          //                        range is full range of character: 0 to 255
 266          //
 267          // Configure Timer0 to wait for <ms> milliseconds using SYSCLK as its time
 268          // base.
 269          //
 270          //-----------------------------------------------------------------------------
 271          void T0_Waitms (uint8_t ms)
 272          {
 273   1         TCON &= ~0x30;                      // Stop Timer0; Clear TCON_TF0
 274   1         TMOD &= ~0x0f;                      // 16-bit free run mode
 275   1         TMOD |=  0x01;
 276   1      
 277   1         CKCON0 |= 0x04;                      // Timer0 counts SYSCLKs
 278   1      
 279   1         while (ms) {
 280   2            TCON_TR0 = 0;                         // Stop Timer0
 281   2            TH0 = ((-SYSCLK/1000) >> 8);     // Overflow in 1ms
 282   2            TL0 = ((-SYSCLK/1000) & 0xFF);
 283   2            TCON_TF0 = 0;                         // Clear overflow indicator
 284   2            TCON_TR0 = 1;                         // Start Timer0
 285   2            while (!TCON_TF0);                    // Wait for overflow
 286   2            ms--;                            // Update ms counter
 287   2         }
 288   1      
 289   1         TCON_TR0 = 0;                            // Stop Timer0
 290   1      }
 291          
 292          //-----------------------------------------------------------------------------
 293          // End Of File
 294          //-----------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    235    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9       2
C51 COMPILER V9.60.0.0   EFM8SB1_SMBUS_MASTER_MULTIBYTE                                    08/25/2024 21:07:34 PAGE 6   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
